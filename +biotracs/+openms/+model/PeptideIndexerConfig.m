% BIOASTER
%> @file		PeptideIndexerConfig.m
%> @class		biotracs.openms.model.PeptideIndexerConfig
%> @link		http://www.bioaster.org
%> @copyright	Copyright (c) 2014, Bioaster Technology Research Institute (http://www.bioaster.org)
%> @license		BIOASTER
%> @date		2015


classdef PeptideIndexerConfig < biotracs.openms.model.BaseProcessConfig
    
    properties(Constant)
        
    end
    
    properties(SetAccess = protected)
    end
    
    % -------------------------------------------------------
    % Public methods
    % -------------------------------------------------------
    
    methods
        
        % Constructor
        function this = PeptideIndexerConfig( )
            this@biotracs.openms.model.BaseProcessConfig( );
			this.updateParamValue('OutputFileExtension','idXML');
            this.createParam ('FastaFilePath', '', ...
                'Constraint', biotracs.core.constraint.IsInputPath(), ...
                'Description', 'Input sequence database in FASTA format. Non-existing relative filenames are looked up via OpenMS.ini:id_db_dir (valid formats: fasta)');
            this.createParam ('DecoyString', '_rev', ...
                'Constraint', biotracs.core.constraint.IsText(), ...
                'Description', 'String that was appended to the accession of the protein database to indicate a decoy protein. (default: _rev)');
            this.createParam ('PositionOfDecoyString', 'suffix', ...
                'Constraint', biotracs.core.constraint.IsText(), ...
                'Description', 'Should the decoy_string be prepended (prefix) or appended (suffix) to the protein accession. (default: suffix)');
            this.createParam('AllowUnmatched',  true, ...
                'Constraint', biotracs.core.constraint.IsBoolean(),...
                'Description', 'If set, unmatched peptide sequences are allowed. By default (i.e. if this flag is not set) the program terminates with an error on unmatched peptides. Values: true or false. (default: true)');
            this.createParam('MissingDecoyAction',  'warn', ...
                'Constraint', biotracs.core.constraint.IsInSet({'error','warn'}),...
                'Description', 'Action to take if NO peptide was assigned to a decoy protein (which indicates wrong database or decoy string): ''error'' (exit with error, no output), ''warn'' (exit with success, warning message). Values: error or warn. (default: error)');
            this.createParam('WriteProteinSequence',  true, ...
                'Constraint', biotracs.core.constraint.IsBoolean(),...
                'Description', 'If set, the protein sequences are stored as well. Values: true or false. (default: true)');
            this.createParam('WriteProteinDescription',  true, ...
                'Constraint', biotracs.core.constraint.IsBoolean(),...
                'Description', 'If set, the protein descriptions are stored as well. Values: true or false. (default: true)');
             this.createParam ('SpecifictyOfEnzyme', 'semi', ...
                'Constraint', biotracs.core.constraint.IsInSet({'full', 'semi', 'none'}), ...
                'Description', 'Specificity of the enzyme. full: both internal cleavage sites must match.  semi: one of two internal cleavage sites must match.  none: allow all peptide hits no matter their context. Therefore, the enzyme chosen does not play a role here. (default: none)');
          this.createParam ('Enzyme', 'Trypsin', ...
                'Constraint', biotracs.core.constraint.IsText(), ...
                'Description', 'Enzyme which determines valid cleavage sites. (default: Trypsin)');
          
            
            this.optionSet.addElements(...
                'AllowUnmatched',  biotracs.core.shell.model.Option('-allow_unmatched  "%s"' ,  'FormatFunction', @(x)this.doFormatBoolean(x)), ...
                'MissingDecoyAction',  biotracs.core.shell.model.Option('-missing_decoy_action  "%s"'), ...
                'DecoyString',  biotracs.core.shell.model.Option('-decoy_string "%s"'), ...
                'Enzyme',  biotracs.core.shell.model.Option('-enzyme:name "%s"'), ...
                'SpecifictyOfEnzyme',  biotracs.core.shell.model.Option('-enzyme:specificity "%s"'), ...
                'PositionOfDecoyString',  biotracs.core.shell.model.Option('-decoy_string_position "%s"'), ...
                'WriteProteinSequence',  biotracs.core.shell.model.Option('-write_protein_sequence  "%s"' ,  'FormatFunction', @(x)this.doFormatBoolean(x) ), ...
                'WriteProteinDescription',  biotracs.core.shell.model.Option('-write_protein_description  "%s"' ,  'FormatFunction', @(x)this.doFormatBoolean(x) ), ...
                'FastaFilePath',   biotracs.core.shell.model.Option('-fasta "%s"') ...
               );
        end
        
    end
    
    % -------------------------------------------------------
    % Protected methods
    % -------------------------------------------------------
    
    methods(Access = protected)        
    end

    
end
